/*! (c) 2019-2021 pixiv Inc. - https://github.com/pixiv/three-vrm/blob/release/LICENSE */
!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],r):r((e="undefined"!=typeof globalThis?globalThis:e||self).THREE_VRM={},e.THREE)}(this,(function(e,r){"use strict";function t(e){if(e&&e.__esModule)return e;var r=Object.create(null);return e&&Object.keys(e).forEach((function(t){if("default"!==t){var n=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,n.get?n:{enumerable:!0,get:function(){return e[t]}})}})),r.default=e,Object.freeze(r)}var n,i=t(r);
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function o(e,r,t,n){return new(t||(t=Promise))((function(i,o){function a(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var r;e.done?i(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(a,s)}l((n=n.apply(e,r||[])).next())}))}function a(e){Object.keys(e).forEach((r=>{const t=e[r];if(null==t?void 0:t.isTexture){t.dispose()}})),e.dispose()}function s(e){const r=e.geometry;r&&r.dispose();const t=e.material;t&&(Array.isArray(t)?t.forEach((e=>a(e))):t&&a(t))}!function(e){e[e.NUMBER=0]="NUMBER",e[e.VECTOR2=1]="VECTOR2",e[e.VECTOR3=2]="VECTOR3",e[e.VECTOR4=3]="VECTOR4",e[e.COLOR=4]="COLOR"}(n||(n={}));const l=new i.Vector2,d=new i.Vector3,h=new i.Vector4,u=new i.Color;class c extends i.Object3D{constructor(e){super(),this.weight=0,this.isBinary=!1,this._binds=[],this._materialValues=[],this.name=`BlendShapeController_${e}`,this.type="BlendShapeController",this.visible=!1}addBind(e){const r=e.weight/100;this._binds.push({meshes:e.meshes,morphTargetIndex:e.morphTargetIndex,weight:r})}addMaterialValue(e){const r=e.material,t=e.propertyName;let o,a,s,l,d=r[t];d&&(d=e.defaultValue||d,d.isVector2?(o=n.VECTOR2,a=d.clone(),s=(new i.Vector2).fromArray(e.targetValue),l=s.clone().sub(a)):d.isVector3?(o=n.VECTOR3,a=d.clone(),s=(new i.Vector3).fromArray(e.targetValue),l=s.clone().sub(a)):d.isVector4?(o=n.VECTOR4,a=d.clone(),s=(new i.Vector4).fromArray([e.targetValue[2],e.targetValue[3],e.targetValue[0],e.targetValue[1]]),l=s.clone().sub(a)):d.isColor?(o=n.COLOR,a=d.clone(),s=(new i.Color).fromArray(e.targetValue),l=s.clone().sub(a)):(o=n.NUMBER,a=d,s=e.targetValue[0],l=s-a),this._materialValues.push({material:r,propertyName:t,defaultValue:a,targetValue:s,deltaValue:l,type:o}))}applyWeight(){const e=this.isBinary?this.weight<.5?0:1:this.weight;this._binds.forEach((r=>{r.meshes.forEach((t=>{t.morphTargetInfluences&&(t.morphTargetInfluences[r.morphTargetIndex]+=e*r.weight)}))})),this._materialValues.forEach((r=>{if(void 0!==r.material[r.propertyName]){if(r.type===n.NUMBER){const t=r.deltaValue;r.material[r.propertyName]+=t*e}else if(r.type===n.VECTOR2){const t=r.deltaValue;r.material[r.propertyName].add(l.copy(t).multiplyScalar(e))}else if(r.type===n.VECTOR3){const t=r.deltaValue;r.material[r.propertyName].add(d.copy(t).multiplyScalar(e))}else if(r.type===n.VECTOR4){const t=r.deltaValue;r.material[r.propertyName].add(h.copy(t).multiplyScalar(e))}else if(r.type===n.COLOR){const t=r.deltaValue;r.material[r.propertyName].add(u.copy(t).multiplyScalar(e))}"boolean"==typeof r.material.shouldApplyUniforms&&(r.material.shouldApplyUniforms=!0)}}))}clearAppliedWeight(){this._binds.forEach((e=>{e.meshes.forEach((r=>{r.morphTargetInfluences&&(r.morphTargetInfluences[e.morphTargetIndex]=0)}))})),this._materialValues.forEach((e=>{if(void 0!==e.material[e.propertyName]){if(e.type===n.NUMBER){const r=e.defaultValue;e.material[e.propertyName]=r}else if(e.type===n.VECTOR2){const r=e.defaultValue;e.material[e.propertyName].copy(r)}else if(e.type===n.VECTOR3){const r=e.defaultValue;e.material[e.propertyName].copy(r)}else if(e.type===n.VECTOR4){const r=e.defaultValue;e.material[e.propertyName].copy(r)}else if(e.type===n.COLOR){const r=e.defaultValue;e.material[e.propertyName].copy(r)}"boolean"==typeof e.material.shouldApplyUniforms&&(e.material.shouldApplyUniforms=!0)}}))}}var p,m,f,g,_,v,M;function T(e,r,t){const n=e.parser.json.nodes[r].mesh;if(null==n)return null;const i=e.parser.json.meshes[n].primitives.length,o=[];return t.traverse((e=>{o.length<i&&e.isMesh&&o.push(e)})),o}function y(e){return o(this,void 0,void 0,(function*(){const r=yield e.parser.getDependencies("node"),t=new Map;return r.forEach(((r,n)=>{const i=T(e,n,r);null!=i&&t.set(n,i)})),t}))}function x(e){return"_"!==e[0]?(console.warn(`renameMaterialProperty: Given property name "${e}" might be invalid`),e):(e=e.substring(1),/[A-Z]/.test(e[0])?e[0].toLowerCase()+e.substring(1):(console.warn(`renameMaterialProperty: Given property name "${e}" might be invalid`),e))}e.VRMSchema=void 0,p=e.VRMSchema||(e.VRMSchema={}),(m=p.BlendShapePresetName||(p.BlendShapePresetName={})).A="a",m.Angry="angry",m.Blink="blink",m.BlinkL="blink_l",m.BlinkR="blink_r",m.E="e",m.Fun="fun",m.I="i",m.Joy="joy",m.Lookdown="lookdown",m.Lookleft="lookleft",m.Lookright="lookright",m.Lookup="lookup",m.Neutral="neutral",m.O="o",m.Sorrow="sorrow",m.U="u",m.Unknown="unknown",(f=p.FirstPersonLookAtTypeName||(p.FirstPersonLookAtTypeName={})).BlendShape="BlendShape",f.Bone="Bone",(g=p.HumanoidBoneName||(p.HumanoidBoneName={})).Chest="chest",g.Head="head",g.Hips="hips",g.Jaw="jaw",g.LeftEye="leftEye",g.LeftFoot="leftFoot",g.LeftHand="leftHand",g.LeftIndexDistal="leftIndexDistal",g.LeftIndexIntermediate="leftIndexIntermediate",g.LeftIndexProximal="leftIndexProximal",g.LeftLittleDistal="leftLittleDistal",g.LeftLittleIntermediate="leftLittleIntermediate",g.LeftLittleProximal="leftLittleProximal",g.LeftLowerArm="leftLowerArm",g.LeftLowerLeg="leftLowerLeg",g.LeftMiddleDistal="leftMiddleDistal",g.LeftMiddleIntermediate="leftMiddleIntermediate",g.LeftMiddleProximal="leftMiddleProximal",g.LeftRingDistal="leftRingDistal",g.LeftRingIntermediate="leftRingIntermediate",g.LeftRingProximal="leftRingProximal",g.LeftShoulder="leftShoulder",g.LeftThumbDistal="leftThumbDistal",g.LeftThumbIntermediate="leftThumbIntermediate",g.LeftThumbProximal="leftThumbProximal",g.LeftToes="leftToes",g.LeftUpperArm="leftUpperArm",g.LeftUpperLeg="leftUpperLeg",g.Neck="neck",g.RightEye="rightEye",g.RightFoot="rightFoot",g.RightHand="rightHand",g.RightIndexDistal="rightIndexDistal",g.RightIndexIntermediate="rightIndexIntermediate",g.RightIndexProximal="rightIndexProximal",g.RightLittleDistal="rightLittleDistal",g.RightLittleIntermediate="rightLittleIntermediate",g.RightLittleProximal="rightLittleProximal",g.RightLowerArm="rightLowerArm",g.RightLowerLeg="rightLowerLeg",g.RightMiddleDistal="rightMiddleDistal",g.RightMiddleIntermediate="rightMiddleIntermediate",g.RightMiddleProximal="rightMiddleProximal",g.RightRingDistal="rightRingDistal",g.RightRingIntermediate="rightRingIntermediate",g.RightRingProximal="rightRingProximal",g.RightShoulder="rightShoulder",g.RightThumbDistal="rightThumbDistal",g.RightThumbIntermediate="rightThumbIntermediate",g.RightThumbProximal="rightThumbProximal",g.RightToes="rightToes",g.RightUpperArm="rightUpperArm",g.RightUpperLeg="rightUpperLeg",g.Spine="spine",g.UpperChest="upperChest",(_=p.MetaAllowedUserName||(p.MetaAllowedUserName={})).Everyone="Everyone",_.ExplicitlyLicensedPerson="ExplicitlyLicensedPerson",_.OnlyAuthor="OnlyAuthor",(v=p.MetaUssageName||(p.MetaUssageName={})).Allow="Allow",v.Disallow="Disallow",(M=p.MetaLicenseName||(p.MetaLicenseName={})).Cc0="CC0",M.CcBy="CC_BY",M.CcByNc="CC_BY_NC",M.CcByNcNd="CC_BY_NC_ND",M.CcByNcSa="CC_BY_NC_SA",M.CcByNd="CC_BY_ND",M.CcBySa="CC_BY_SA",M.Other="Other",M.RedistributionProhibited="Redistribution_Prohibited";const S=new i.Vector3,R=new i.Vector3;function L(e,r){return e.matrixWorld.decompose(S,r,R),r}new i.Quaternion;class E{constructor(){this._blendShapeGroups={},this._blendShapePresetMap={},this._unknownGroupNames=[]}get expressions(){return Object.keys(this._blendShapeGroups)}get blendShapePresetMap(){return this._blendShapePresetMap}get unknownGroupNames(){return this._unknownGroupNames}getBlendShapeGroup(e){const r=this._blendShapePresetMap[e],t=r?this._blendShapeGroups[r]:this._blendShapeGroups[e];if(t)return t;console.warn(`no blend shape found by ${e}`)}registerBlendShapeGroup(e,r,t){this._blendShapeGroups[e]=t,r?this._blendShapePresetMap[r]=e:this._unknownGroupNames.push(e)}getValue(e){var r;const t=this.getBlendShapeGroup(e);return null!==(r=null==t?void 0:t.weight)&&void 0!==r?r:null}setValue(e,r){const t=this.getBlendShapeGroup(e);var n;t&&(t.weight=(n=r,Math.max(Math.min(n,1),0)))}getBlendShapeTrackName(e){const r=this.getBlendShapeGroup(e);return r?`${r.name}.weight`:null}update(){Object.keys(this._blendShapeGroups).forEach((e=>{this._blendShapeGroups[e].clearAppliedWeight()})),Object.keys(this._blendShapeGroups).forEach((e=>{this._blendShapeGroups[e].applyWeight()}))}}class w{import(r){var t;return o(this,void 0,void 0,(function*(){const n=null===(t=r.parser.json.extensions)||void 0===t?void 0:t.VRM;if(!n)return null;const i=n.blendShapeMaster;if(!i)return null;const a=new E,s=i.blendShapeGroups;if(!s)return a;const l={};return yield Promise.all(s.map((t=>o(this,void 0,void 0,(function*(){const n=t.name;if(void 0===n)return void console.warn("VRMBlendShapeImporter: One of blendShapeGroups has no name");let i;t.presetName&&t.presetName!==e.VRMSchema.BlendShapePresetName.Unknown&&!l[t.presetName]&&(i=t.presetName,l[t.presetName]=n);const s=new c(n);r.scene.add(s),s.isBinary=t.isBinary||!1,t.binds&&t.binds.forEach((e=>o(this,void 0,void 0,(function*(){if(void 0===e.mesh||void 0===e.index)return;const n=[];r.parser.json.nodes.forEach(((r,t)=>{r.mesh===e.mesh&&n.push(t)}));const i=e.index;yield Promise.all(n.map((n=>o(this,void 0,void 0,(function*(){var a;const l=yield function(e,r){return o(this,void 0,void 0,(function*(){const t=yield e.parser.getDependency("node",r);return T(e,r,t)}))}(r,n);l.every((e=>Array.isArray(e.morphTargetInfluences)&&i<e.morphTargetInfluences.length))?s.addBind({meshes:l,morphTargetIndex:i,weight:null!==(a=e.weight)&&void 0!==a?a:100}):console.warn(`VRMBlendShapeImporter: ${t.name} attempts to index ${i}th morph but not found.`)})))))}))));const d=t.materialValues;d&&d.forEach((e=>{if(void 0===e.materialName||void 0===e.propertyName||void 0===e.targetValue)return;const t=[];r.scene.traverse((r=>{if(r.material){const n=r.material;Array.isArray(n)?t.push(...n.filter((r=>r.name===e.materialName&&-1===t.indexOf(r)))):n.name===e.materialName&&-1===t.indexOf(n)&&t.push(n)}})),t.forEach((r=>{s.addMaterialValue({material:r,propertyName:x(e.propertyName),targetValue:e.targetValue})}))})),a.registerBlendShapeGroup(n,i,s)}))))),a}))}}const P=Object.freeze(new i.Vector3(0,0,-1)),A=new i.Quaternion;var C;!function(e){e[e.Auto=0]="Auto",e[e.Both=1]="Both",e[e.ThirdPersonOnly=2]="ThirdPersonOnly",e[e.FirstPersonOnly=3]="FirstPersonOnly"}(C||(C={}));class O{constructor(e,r){this.firstPersonFlag=O._parseFirstPersonFlag(e),this.primitives=r}static _parseFirstPersonFlag(e){switch(e){case"Both":return C.Both;case"ThirdPersonOnly":return C.ThirdPersonOnly;case"FirstPersonOnly":return C.FirstPersonOnly;default:return C.Auto}}}class b{constructor(e,r,t){this._meshAnnotations=[],this._firstPersonOnlyLayer=b._DEFAULT_FIRSTPERSON_ONLY_LAYER,this._thirdPersonOnlyLayer=b._DEFAULT_THIRDPERSON_ONLY_LAYER,this._initialized=!1,this._firstPersonBone=e,this._firstPersonBoneOffset=r,this._meshAnnotations=t}get firstPersonBone(){return this._firstPersonBone}get meshAnnotations(){return this._meshAnnotations}getFirstPersonWorldDirection(e){return e.copy(P).applyQuaternion(L(this._firstPersonBone,A))}get firstPersonOnlyLayer(){return this._firstPersonOnlyLayer}get thirdPersonOnlyLayer(){return this._thirdPersonOnlyLayer}getFirstPersonBoneOffset(e){return e.copy(this._firstPersonBoneOffset)}getFirstPersonWorldPosition(e){const r=this._firstPersonBoneOffset,t=new i.Vector4(r.x,r.y,r.z,1);return t.applyMatrix4(this._firstPersonBone.matrixWorld),e.set(t.x,t.y,t.z)}setup({firstPersonOnlyLayer:e=b._DEFAULT_FIRSTPERSON_ONLY_LAYER,thirdPersonOnlyLayer:r=b._DEFAULT_THIRDPERSON_ONLY_LAYER}={}){this._initialized||(this._initialized=!0,this._firstPersonOnlyLayer=e,this._thirdPersonOnlyLayer=r,this._meshAnnotations.forEach((e=>{e.firstPersonFlag===C.FirstPersonOnly?e.primitives.forEach((e=>{e.layers.set(this._firstPersonOnlyLayer)})):e.firstPersonFlag===C.ThirdPersonOnly?e.primitives.forEach((e=>{e.layers.set(this._thirdPersonOnlyLayer)})):e.firstPersonFlag===C.Auto&&this._createHeadlessModel(e.primitives)})))}_excludeTriangles(e,r,t,n){let i=0;if(null!=r&&r.length>0)for(let o=0;o<e.length;o+=3){const a=e[o],s=e[o+1],l=e[o+2],d=r[a],h=t[a];if(d[0]>0&&n.includes(h[0]))continue;if(d[1]>0&&n.includes(h[1]))continue;if(d[2]>0&&n.includes(h[2]))continue;if(d[3]>0&&n.includes(h[3]))continue;const u=r[s],c=t[s];if(u[0]>0&&n.includes(c[0]))continue;if(u[1]>0&&n.includes(c[1]))continue;if(u[2]>0&&n.includes(c[2]))continue;if(u[3]>0&&n.includes(c[3]))continue;const p=r[l],m=t[l];p[0]>0&&n.includes(m[0])||(p[1]>0&&n.includes(m[1])||p[2]>0&&n.includes(m[2])||p[3]>0&&n.includes(m[3])||(e[i++]=a,e[i++]=s,e[i++]=l))}return i}_createErasedMesh(e,r){const t=new i.SkinnedMesh(e.geometry.clone(),e.material);t.name=`${e.name}(erase)`,t.frustumCulled=e.frustumCulled,t.layers.set(this._firstPersonOnlyLayer);const n=t.geometry,o=n.getAttribute("skinIndex").array,a=[];for(let e=0;e<o.length;e+=4)a.push([o[e],o[e+1],o[e+2],o[e+3]]);const s=n.getAttribute("skinWeight").array,l=[];for(let e=0;e<s.length;e+=4)l.push([s[e],s[e+1],s[e+2],s[e+3]]);const d=n.getIndex();if(!d)throw new Error("The geometry doesn't have an index buffer");const h=Array.from(d.array),u=this._excludeTriangles(h,l,a,r),c=[];for(let e=0;e<u;e++)c[e]=h[e];return n.setIndex(c),e.onBeforeRender&&(t.onBeforeRender=e.onBeforeRender),t.bind(new i.Skeleton(e.skeleton.bones,e.skeleton.boneInverses),new i.Matrix4),t}_createHeadlessModelForSkinnedMesh(e,r){const t=[];if(r.skeleton.bones.forEach(((e,r)=>{this._isEraseTarget(e)&&t.push(r)})),!t.length)return r.layers.enable(this._thirdPersonOnlyLayer),void r.layers.enable(this._firstPersonOnlyLayer);r.layers.set(this._thirdPersonOnlyLayer);const n=this._createErasedMesh(r,t);e.add(n)}_createHeadlessModel(e){e.forEach((e=>{if("SkinnedMesh"===e.type){const r=e;this._createHeadlessModelForSkinnedMesh(r.parent,r)}else this._isEraseTarget(e)&&e.layers.set(this._thirdPersonOnlyLayer)}))}_isEraseTarget(e){return e===this._firstPersonBone||!!e.parent&&this._isEraseTarget(e.parent)}}b._DEFAULT_FIRSTPERSON_ONLY_LAYER=9,b._DEFAULT_THIRDPERSON_ONLY_LAYER=10;class D{import(r,t){var n;return o(this,void 0,void 0,(function*(){const o=null===(n=r.parser.json.extensions)||void 0===n?void 0:n.VRM;if(!o)return null;const a=o.firstPerson;if(!a)return null;const s=a.firstPersonBone;let l;if(l=void 0===s||-1===s?t.getBoneNode(e.VRMSchema.HumanoidBoneName.Head):yield r.parser.getDependency("node",s),!l)return console.warn("VRMFirstPersonImporter: Could not find firstPersonBone of the VRM"),null;const d=a.firstPersonBoneOffset?new i.Vector3(a.firstPersonBoneOffset.x,a.firstPersonBoneOffset.y,-a.firstPersonBoneOffset.z):new i.Vector3(0,.06,0),h=[],u=yield y(r);return Array.from(u.entries()).forEach((([e,t])=>{const n=r.parser.json.nodes[e],i=a.meshAnnotations?a.meshAnnotations.find((e=>e.mesh===n.mesh)):void 0;h.push(new O(null==i?void 0:i.firstPersonFlag,t))})),new b(l,d,h)}))}}class V{constructor(e,r){this.node=e,this.humanLimit=r}}function N(e){return e.invert?e.invert():e.inverse(),e}const U=new i.Vector3,I=new i.Quaternion;class B{constructor(e,r){this.restPose={},this.humanBones=this._createHumanBones(e),this.humanDescription=r,this.restPose=this.getPose()}getPose(){const e={};return Object.keys(this.humanBones).forEach((r=>{const t=this.getBoneNode(r);if(!t)return;if(e[r])return;U.set(0,0,0),I.identity();const n=this.restPose[r];(null==n?void 0:n.position)&&U.fromArray(n.position).negate(),(null==n?void 0:n.rotation)&&N(I.fromArray(n.rotation)),U.add(t.position),I.premultiply(t.quaternion),e[r]={position:U.toArray(),rotation:I.toArray()}}),{}),e}setPose(e){Object.keys(e).forEach((r=>{const t=e[r],n=this.getBoneNode(r);if(!n)return;const i=this.restPose[r];i&&(t.position&&(n.position.fromArray(t.position),i.position&&n.position.add(U.fromArray(i.position))),t.rotation&&(n.quaternion.fromArray(t.rotation),i.rotation&&n.quaternion.multiply(I.fromArray(i.rotation))))}))}resetPose(){Object.entries(this.restPose).forEach((([e,r])=>{const t=this.getBoneNode(e);t&&((null==r?void 0:r.position)&&t.position.fromArray(r.position),(null==r?void 0:r.rotation)&&t.quaternion.fromArray(r.rotation))}))}getBone(e){var r;return null!==(r=this.humanBones[e][0])&&void 0!==r?r:void 0}getBones(e){var r;return null!==(r=this.humanBones[e])&&void 0!==r?r:[]}getBoneNode(e){var r,t;return null!==(t=null===(r=this.humanBones[e][0])||void 0===r?void 0:r.node)&&void 0!==t?t:null}getBoneNodes(e){var r,t;return null!==(t=null===(r=this.humanBones[e])||void 0===r?void 0:r.map((e=>e.node)))&&void 0!==t?t:[]}_createHumanBones(r){const t=Object.values(e.VRMSchema.HumanoidBoneName).reduce(((e,r)=>(e[r]=[],e)),{});return r.forEach((e=>{t[e.name].push(e.bone)})),t}}class G{import(e){var r;return o(this,void 0,void 0,(function*(){const t=null===(r=e.parser.json.extensions)||void 0===r?void 0:r.VRM;if(!t)return null;const n=t.humanoid;if(!n)return null;const a=[];n.humanBones&&(yield Promise.all(n.humanBones.map((r=>o(this,void 0,void 0,(function*(){if(!r.bone||null==r.node)return;const t=yield e.parser.getDependency("node",r.node);a.push({name:r.bone,bone:new V(t,{axisLength:r.axisLength,center:r.center&&new i.Vector3(r.center.x,r.center.y,r.center.z),max:r.max&&new i.Vector3(r.max.x,r.max.y,r.max.z),min:r.min&&new i.Vector3(r.min.x,r.min.y,r.min.z),useDefaultValues:r.useDefaultValues})})}))))));const s={armStretch:n.armStretch,legStretch:n.legStretch,upperArmTwist:n.upperArmTwist,lowerArmTwist:n.lowerArmTwist,upperLegTwist:n.upperLegTwist,lowerLegTwist:n.lowerLegTwist,feetSpacing:n.feetSpacing,hasTranslationDoF:n.hasTranslationDoF};return new B(a,s)}))}}class F{constructor(e,r,t){this.curve=[0,0,0,1,1,1,1,0],this.curveXRangeDegree=90,this.curveYRangeDegree=10,void 0!==e&&(this.curveXRangeDegree=e),void 0!==r&&(this.curveYRangeDegree=r),void 0!==t&&(this.curve=t)}map(e){const r=Math.min(Math.max(e,0),this.curveXRangeDegree)/this.curveXRangeDegree;return this.curveYRangeDegree*((e,r)=>{if(e.length<8)throw new Error("evaluateCurve: Invalid curve detected! (Array length must be 8 at least)");if(e.length%4!=0)throw new Error("evaluateCurve: Invalid curve detected! (Array length must be multiples of 4");let t;for(t=0;;t++){if(e.length<=4*t)return e[4*t-3];if(r<=e[4*t])break}const n=t-1;if(n<0)return e[4*n+5];const i=e[4*n],o=(r-i)/(e[4*t]-i);return((e,r,t,n,i)=>{const o=i*i*i,a=i*i;return e+(r-e)*(-2*o+3*a)+t*(o-2*a+i)+n*(o-a)})(e[4*n+1],e[4*t+1],e[4*n+3],e[4*t+2],o)})(this.curve,r)}}class k{}class W extends k{constructor(r,t,n,i){super(),this.type=e.VRMSchema.FirstPersonLookAtTypeName.BlendShape,this._curveHorizontal=t,this._curveVerticalDown=n,this._curveVerticalUp=i,this._blendShapeProxy=r}name(){return e.VRMSchema.FirstPersonLookAtTypeName.BlendShape}lookAt(r){const t=r.x,n=r.y;t<0?(this._blendShapeProxy.setValue(e.VRMSchema.BlendShapePresetName.Lookup,0),this._blendShapeProxy.setValue(e.VRMSchema.BlendShapePresetName.Lookdown,this._curveVerticalDown.map(-t))):(this._blendShapeProxy.setValue(e.VRMSchema.BlendShapePresetName.Lookdown,0),this._blendShapeProxy.setValue(e.VRMSchema.BlendShapePresetName.Lookup,this._curveVerticalUp.map(t))),n<0?(this._blendShapeProxy.setValue(e.VRMSchema.BlendShapePresetName.Lookleft,0),this._blendShapeProxy.setValue(e.VRMSchema.BlendShapePresetName.Lookright,this._curveHorizontal.map(-n))):(this._blendShapeProxy.setValue(e.VRMSchema.BlendShapePresetName.Lookright,0),this._blendShapeProxy.setValue(e.VRMSchema.BlendShapePresetName.Lookleft,this._curveHorizontal.map(n)))}}const H=Object.freeze(new i.Vector3(0,0,-1)),z=new i.Vector3,j=new i.Vector3,Y=new i.Vector3,X=new i.Quaternion;class q{constructor(e,r){this.autoUpdate=!0,this._euler=new i.Euler(0,0,0,q.EULER_ORDER),this.firstPerson=e,this.applyer=r}getLookAtWorldDirection(e){const r=L(this.firstPerson.firstPersonBone,X);return e.copy(H).applyEuler(this._euler).applyQuaternion(r)}lookAt(e){this._calcEuler(this._euler,e),this.applyer&&this.applyer.lookAt(this._euler)}update(e){this.target&&this.autoUpdate&&(this.lookAt(this.target.getWorldPosition(z)),this.applyer&&this.applyer.lookAt(this._euler))}_calcEuler(e,r){const t=this.firstPerson.getFirstPersonWorldPosition(j),n=Y.copy(r).sub(t).normalize();return n.applyQuaternion(N(L(this.firstPerson.firstPersonBone,X))),e.x=Math.atan2(n.y,Math.sqrt(n.x*n.x+n.z*n.z)),e.y=Math.atan2(-n.x,-n.z),e}}q.EULER_ORDER="YXZ";const Q=new i.Euler(0,0,0,q.EULER_ORDER);class Z extends k{constructor(r,t,n,i,o){super(),this.type=e.VRMSchema.FirstPersonLookAtTypeName.Bone,this._curveHorizontalInner=t,this._curveHorizontalOuter=n,this._curveVerticalDown=i,this._curveVerticalUp=o,this._leftEye=r.getBoneNode(e.VRMSchema.HumanoidBoneName.LeftEye),this._rightEye=r.getBoneNode(e.VRMSchema.HumanoidBoneName.RightEye)}lookAt(e){const r=e.x,t=e.y;this._leftEye&&(Q.x=r<0?-this._curveVerticalDown.map(-r):this._curveVerticalUp.map(r),Q.y=t<0?-this._curveHorizontalInner.map(-t):this._curveHorizontalOuter.map(t),this._leftEye.quaternion.setFromEuler(Q)),this._rightEye&&(Q.x=r<0?-this._curveVerticalDown.map(-r):this._curveVerticalUp.map(r),Q.y=t<0?-this._curveHorizontalOuter.map(-t):this._curveHorizontalInner.map(t),this._rightEye.quaternion.setFromEuler(Q))}}const $=Math.PI/180;class J{import(e,r,t,n){var i;const o=null===(i=e.parser.json.extensions)||void 0===i?void 0:i.VRM;if(!o)return null;const a=o.firstPerson;if(!a)return null;const s=this._importApplyer(a,t,n);return new q(r,s||void 0)}_importApplyer(r,t,n){const i=r.lookAtHorizontalInner,o=r.lookAtHorizontalOuter,a=r.lookAtVerticalDown,s=r.lookAtVerticalUp;switch(r.lookAtTypeName){case e.VRMSchema.FirstPersonLookAtTypeName.Bone:return void 0===i||void 0===o||void 0===a||void 0===s?null:new Z(n,this._importCurveMapperBone(i),this._importCurveMapperBone(o),this._importCurveMapperBone(a),this._importCurveMapperBone(s));case e.VRMSchema.FirstPersonLookAtTypeName.BlendShape:return void 0===o||void 0===a||void 0===s?null:new W(t,this._importCurveMapperBlendShape(o),this._importCurveMapperBlendShape(a),this._importCurveMapperBlendShape(s));default:return null}}_importCurveMapperBone(e){return new F("number"==typeof e.xRange?$*e.xRange:void 0,"number"==typeof e.yRange?$*e.yRange:void 0,e.curve)}_importCurveMapperBlendShape(e){return new F("number"==typeof e.xRange?$*e.xRange:void 0,e.yRange,e.curve)}}const K=(e,r)=>{const t=(e=>{switch(e){case i.LinearEncoding:return["Linear","( value )"];case i.sRGBEncoding:return["sRGB","( value )"];case i.RGBEEncoding:return["RGBE","( value )"];case i.RGBM7Encoding:return["RGBM","( value, 7.0 )"];case i.RGBM16Encoding:return["RGBM","( value, 16.0 )"];case i.RGBDEncoding:return["RGBD","( value, 256.0 )"];case i.GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+e)}})(r);return"vec4 "+e+"( vec4 value ) { return "+t[0]+"ToLinear"+t[1]+"; }"};const ee=2*Math.PI;var re,te,ne,ie,oe;e.MToonMaterialCullMode=void 0,(re=e.MToonMaterialCullMode||(e.MToonMaterialCullMode={}))[re.Off=0]="Off",re[re.Front=1]="Front",re[re.Back=2]="Back",e.MToonMaterialDebugMode=void 0,(te=e.MToonMaterialDebugMode||(e.MToonMaterialDebugMode={}))[te.None=0]="None",te[te.Normal=1]="Normal",te[te.LitShadeRate=2]="LitShadeRate",te[te.UV=3]="UV",e.MToonMaterialOutlineColorMode=void 0,(ne=e.MToonMaterialOutlineColorMode||(e.MToonMaterialOutlineColorMode={}))[ne.FixedColor=0]="FixedColor",ne[ne.MixedLighting=1]="MixedLighting",e.MToonMaterialOutlineWidthMode=void 0,(ie=e.MToonMaterialOutlineWidthMode||(e.MToonMaterialOutlineWidthMode={}))[ie.None=0]="None",ie[ie.WorldCoordinates=1]="WorldCoordinates",ie[ie.ScreenCoordinates=2]="ScreenCoordinates",e.MToonMaterialRenderMode=void 0,(oe=e.MToonMaterialRenderMode||(e.MToonMaterialRenderMode={}))[oe.Opaque=0]="Opaque",oe[oe.Cutout=1]="Cutout",oe[oe.Transparent=2]="Transparent",oe[oe.TransparentWithZWrite=3]="TransparentWithZWrite";class ae extends i.ShaderMaterial{constructor(r={}){super(),this.isMToonMaterial=!0,this.cutoff=.5,this.color=new i.Vector4(1,1,1,1),this.shadeColor=new i.Vector4(.97,.81,.86,1),this.map=null,this.mainTex_ST=new i.Vector4(0,0,1,1),this.shadeTexture=null,this.normalMap=null,this.normalMapType=i.TangentSpaceNormalMap,this.normalScale=new i.Vector2(1,1),this.receiveShadowRate=1,this.receiveShadowTexture=null,this.shadingGradeRate=1,this.shadingGradeTexture=null,this.shadeShift=0,this.shadeToony=.9,this.lightColorAttenuation=0,this.indirectLightIntensity=.1,this.rimTexture=null,this.rimColor=new i.Vector4(0,0,0,1),this.rimLightingMix=0,this.rimFresnelPower=1,this.rimLift=0,this.sphereAdd=null,this.emissionColor=new i.Vector4(0,0,0,1),this.emissiveMap=null,this.outlineWidthTexture=null,this.outlineWidth=.5,this.outlineScaledMaxDistance=1,this.outlineColor=new i.Vector4(0,0,0,1),this.outlineLightingMix=1,this.uvAnimMaskTexture=null,this.uvAnimScrollX=0,this.uvAnimScrollY=0,this.uvAnimRotation=0,this.shouldApplyUniforms=!0,this._debugMode=e.MToonMaterialDebugMode.None,this._blendMode=e.MToonMaterialRenderMode.Opaque,this._outlineWidthMode=e.MToonMaterialOutlineWidthMode.None,this._outlineColorMode=e.MToonMaterialOutlineColorMode.FixedColor,this._cullMode=e.MToonMaterialCullMode.Back,this._outlineCullMode=e.MToonMaterialCullMode.Front,this._isOutline=!1,this._uvAnimOffsetX=0,this._uvAnimOffsetY=0,this._uvAnimPhase=0,this.encoding=r.encoding||i.LinearEncoding,this.encoding!==i.LinearEncoding&&this.encoding!==i.sRGBEncoding&&console.warn("The specified color encoding does not work properly with MToonMaterial. You might want to use THREE.sRGBEncoding instead."),["mToonVersion","shadeTexture_ST","bumpMap_ST","receiveShadowTexture_ST","shadingGradeTexture_ST","rimTexture_ST","sphereAdd_ST","emissionMap_ST","outlineWidthTexture_ST","uvAnimMaskTexture_ST","srcBlend","dstBlend"].forEach((e=>{void 0!==r[e]&&delete r[e]})),r.fog=!0,r.lights=!0,r.clipping=!0,r.skinning=r.skinning||!1,r.morphTargets=r.morphTargets||!1,r.morphNormals=r.morphNormals||!1,r.uniforms=i.UniformsUtils.merge([i.UniformsLib.common,i.UniformsLib.normalmap,i.UniformsLib.emissivemap,i.UniformsLib.fog,i.UniformsLib.lights,{cutoff:{value:.5},color:{value:new i.Color(1,1,1)},colorAlpha:{value:1},shadeColor:{value:new i.Color(.97,.81,.86)},mainTex_ST:{value:new i.Vector4(0,0,1,1)},shadeTexture:{value:null},receiveShadowRate:{value:1},receiveShadowTexture:{value:null},shadingGradeRate:{value:1},shadingGradeTexture:{value:null},shadeShift:{value:0},shadeToony:{value:.9},lightColorAttenuation:{value:0},indirectLightIntensity:{value:.1},rimTexture:{value:null},rimColor:{value:new i.Color(0,0,0)},rimLightingMix:{value:0},rimFresnelPower:{value:1},rimLift:{value:0},sphereAdd:{value:null},emissionColor:{value:new i.Color(0,0,0)},outlineWidthTexture:{value:null},outlineWidth:{value:.5},outlineScaledMaxDistance:{value:1},outlineColor:{value:new i.Color(0,0,0)},outlineLightingMix:{value:1},uvAnimMaskTexture:{value:null},uvAnimOffsetX:{value:0},uvAnimOffsetY:{value:0},uvAnimTheta:{value:0}}]),this.setValues(r),this._updateShaderCode(),this._applyUniforms()}get mainTex(){return this.map}set mainTex(e){this.map=e}get bumpMap(){return this.normalMap}set bumpMap(e){this.normalMap=e}get bumpScale(){return this.normalScale.x}set bumpScale(e){this.normalScale.set(e,e)}get emissionMap(){return this.emissiveMap}set emissionMap(e){this.emissiveMap=e}get blendMode(){return this._blendMode}set blendMode(r){this._blendMode=r,this.depthWrite=this._blendMode!==e.MToonMaterialRenderMode.Transparent,this.transparent=this._blendMode===e.MToonMaterialRenderMode.Transparent||this._blendMode===e.MToonMaterialRenderMode.TransparentWithZWrite,this._updateShaderCode()}get debugMode(){return this._debugMode}set debugMode(e){this._debugMode=e,this._updateShaderCode()}get outlineWidthMode(){return this._outlineWidthMode}set outlineWidthMode(e){this._outlineWidthMode=e,this._updateShaderCode()}get outlineColorMode(){return this._outlineColorMode}set outlineColorMode(e){this._outlineColorMode=e,this._updateShaderCode()}get cullMode(){return this._cullMode}set cullMode(e){this._cullMode=e,this._updateCullFace()}get outlineCullMode(){return this._outlineCullMode}set outlineCullMode(e){this._outlineCullMode=e,this._updateCullFace()}get zWrite(){return this.depthWrite?1:0}set zWrite(e){this.depthWrite=.5<=e}get isOutline(){return this._isOutline}set isOutline(e){this._isOutline=e,this._updateShaderCode(),this._updateCullFace()}updateVRMMaterials(e){this._uvAnimOffsetX=this._uvAnimOffsetX+e*this.uvAnimScrollX,this._uvAnimOffsetY=this._uvAnimOffsetY-e*this.uvAnimScrollY,this._uvAnimPhase=this._uvAnimPhase+e*this.uvAnimRotation,this._applyUniforms()}copy(e){return super.copy(e),this.cutoff=e.cutoff,this.color.copy(e.color),this.shadeColor.copy(e.shadeColor),this.map=e.map,this.mainTex_ST.copy(e.mainTex_ST),this.shadeTexture=e.shadeTexture,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(this.normalScale),this.receiveShadowRate=e.receiveShadowRate,this.receiveShadowTexture=e.receiveShadowTexture,this.shadingGradeRate=e.shadingGradeRate,this.shadingGradeTexture=e.shadingGradeTexture,this.shadeShift=e.shadeShift,this.shadeToony=e.shadeToony,this.lightColorAttenuation=e.lightColorAttenuation,this.indirectLightIntensity=e.indirectLightIntensity,this.rimTexture=e.rimTexture,this.rimColor.copy(e.rimColor),this.rimLightingMix=e.rimLightingMix,this.rimFresnelPower=e.rimFresnelPower,this.rimLift=e.rimLift,this.sphereAdd=e.sphereAdd,this.emissionColor.copy(e.emissionColor),this.emissiveMap=e.emissiveMap,this.outlineWidthTexture=e.outlineWidthTexture,this.outlineWidth=e.outlineWidth,this.outlineScaledMaxDistance=e.outlineScaledMaxDistance,this.outlineColor.copy(e.outlineColor),this.outlineLightingMix=e.outlineLightingMix,this.uvAnimMaskTexture=e.uvAnimMaskTexture,this.uvAnimScrollX=e.uvAnimScrollX,this.uvAnimScrollY=e.uvAnimScrollY,this.uvAnimRotation=e.uvAnimRotation,this.debugMode=e.debugMode,this.blendMode=e.blendMode,this.outlineWidthMode=e.outlineWidthMode,this.outlineColorMode=e.outlineColorMode,this.cullMode=e.cullMode,this.outlineCullMode=e.outlineCullMode,this.isOutline=e.isOutline,this}_applyUniforms(){this.uniforms.uvAnimOffsetX.value=this._uvAnimOffsetX,this.uniforms.uvAnimOffsetY.value=this._uvAnimOffsetY,this.uniforms.uvAnimTheta.value=ee*this._uvAnimPhase,this.shouldApplyUniforms&&(this.shouldApplyUniforms=!1,this.uniforms.cutoff.value=this.cutoff,this.uniforms.color.value.setRGB(this.color.x,this.color.y,this.color.z),this.uniforms.colorAlpha.value=this.color.w,this.uniforms.shadeColor.value.setRGB(this.shadeColor.x,this.shadeColor.y,this.shadeColor.z),this.uniforms.map.value=this.map,this.uniforms.mainTex_ST.value.copy(this.mainTex_ST),this.uniforms.shadeTexture.value=this.shadeTexture,this.uniforms.normalMap.value=this.normalMap,this.uniforms.normalScale.value.copy(this.normalScale),this.uniforms.receiveShadowRate.value=this.receiveShadowRate,this.uniforms.receiveShadowTexture.value=this.receiveShadowTexture,this.uniforms.shadingGradeRate.value=this.shadingGradeRate,this.uniforms.shadingGradeTexture.value=this.shadingGradeTexture,this.uniforms.shadeShift.value=this.shadeShift,this.uniforms.shadeToony.value=this.shadeToony,this.uniforms.lightColorAttenuation.value=this.lightColorAttenuation,this.uniforms.indirectLightIntensity.value=this.indirectLightIntensity,this.uniforms.rimTexture.value=this.rimTexture,this.uniforms.rimColor.value.setRGB(this.rimColor.x,this.rimColor.y,this.rimColor.z),this.uniforms.rimLightingMix.value=this.rimLightingMix,this.uniforms.rimFresnelPower.value=this.rimFresnelPower,this.uniforms.rimLift.value=this.rimLift,this.uniforms.sphereAdd.value=this.sphereAdd,this.uniforms.emissionColor.value.setRGB(this.emissionColor.x,this.emissionColor.y,this.emissionColor.z),this.uniforms.emissiveMap.value=this.emissiveMap,this.uniforms.outlineWidthTexture.value=this.outlineWidthTexture,this.uniforms.outlineWidth.value=this.outlineWidth,this.uniforms.outlineScaledMaxDistance.value=this.outlineScaledMaxDistance,this.uniforms.outlineColor.value.setRGB(this.outlineColor.x,this.outlineColor.y,this.outlineColor.z),this.uniforms.outlineLightingMix.value=this.outlineLightingMix,this.uniforms.uvAnimMaskTexture.value=this.uvAnimMaskTexture,this.encoding===i.sRGBEncoding&&(this.uniforms.color.value.convertSRGBToLinear(),this.uniforms.shadeColor.value.convertSRGBToLinear(),this.uniforms.rimColor.value.convertSRGBToLinear(),this.uniforms.emissionColor.value.convertSRGBToLinear(),this.uniforms.outlineColor.value.convertSRGBToLinear()),this._updateCullFace())}_updateShaderCode(){const r=null!==this.outlineWidthTexture,t=null!==this.map||null!==this.shadeTexture||null!==this.receiveShadowTexture||null!==this.shadingGradeTexture||null!==this.rimTexture||null!==this.uvAnimMaskTexture;this.defines={THREE_VRM_THREE_REVISION_126:parseInt(i.REVISION)>=126,OUTLINE:this._isOutline,BLENDMODE_OPAQUE:this._blendMode===e.MToonMaterialRenderMode.Opaque,BLENDMODE_CUTOUT:this._blendMode===e.MToonMaterialRenderMode.Cutout,BLENDMODE_TRANSPARENT:this._blendMode===e.MToonMaterialRenderMode.Transparent||this._blendMode===e.MToonMaterialRenderMode.TransparentWithZWrite,MTOON_USE_UV:r||t,MTOON_UVS_VERTEX_ONLY:r&&!t,USE_SHADETEXTURE:null!==this.shadeTexture,USE_RECEIVESHADOWTEXTURE:null!==this.receiveShadowTexture,USE_SHADINGGRADETEXTURE:null!==this.shadingGradeTexture,USE_RIMTEXTURE:null!==this.rimTexture,USE_SPHEREADD:null!==this.sphereAdd,USE_OUTLINEWIDTHTEXTURE:null!==this.outlineWidthTexture,USE_UVANIMMASKTEXTURE:null!==this.uvAnimMaskTexture,DEBUG_NORMAL:this._debugMode===e.MToonMaterialDebugMode.Normal,DEBUG_LITSHADERATE:this._debugMode===e.MToonMaterialDebugMode.LitShadeRate,DEBUG_UV:this._debugMode===e.MToonMaterialDebugMode.UV,OUTLINE_WIDTH_WORLD:this._outlineWidthMode===e.MToonMaterialOutlineWidthMode.WorldCoordinates,OUTLINE_WIDTH_SCREEN:this._outlineWidthMode===e.MToonMaterialOutlineWidthMode.ScreenCoordinates,OUTLINE_COLOR_FIXED:this._outlineColorMode===e.MToonMaterialOutlineColorMode.FixedColor,OUTLINE_COLOR_MIXED:this._outlineColorMode===e.MToonMaterialOutlineColorMode.MixedLighting};const n=(null!==this.shadeTexture?K("shadeTextureTexelToLinear",this.shadeTexture.encoding)+"\n":"")+(null!==this.sphereAdd?K("sphereAddTexelToLinear",this.sphereAdd.encoding)+"\n":"")+(null!==this.rimTexture?K("rimTextureTexelToLinear",this.rimTexture.encoding)+"\n":"");this.vertexShader="// #define PHONG\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n  varying vec3 vNormal;\r\n#endif\r\n\r\n#include <common>\r\n\r\n// #include <uv_pars_vertex>\r\n#ifdef MTOON_USE_UV\r\n  #ifdef MTOON_UVS_VERTEX_ONLY\r\n    vec2 vUv;\r\n  #else\r\n    varying vec2 vUv;\r\n  #endif\r\n\r\n  uniform vec4 mainTex_ST;\r\n#endif\r\n\r\n#include <uv2_pars_vertex>\r\n// #include <displacementmap_pars_vertex>\r\n// #include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\n#ifdef USE_OUTLINEWIDTHTEXTURE\r\n  uniform sampler2D outlineWidthTexture;\r\n#endif\r\n\r\nuniform float outlineWidth;\r\nuniform float outlineScaledMaxDistance;\r\n\r\nvoid main() {\r\n\r\n  // #include <uv_vertex>\r\n  #ifdef MTOON_USE_UV\r\n    vUv = uv;\r\n    vUv.y = 1.0 - vUv.y; // uv.y is opposite from UniVRM's\r\n    vUv = mainTex_ST.st + mainTex_ST.pq * vUv;\r\n    vUv.y = 1.0 - vUv.y; // reverting the previous flip\r\n  #endif\r\n\r\n  #include <uv2_vertex>\r\n  #include <color_vertex>\r\n\r\n  #include <beginnormal_vertex>\r\n  #include <morphnormal_vertex>\r\n  #include <skinbase_vertex>\r\n  #include <skinnormal_vertex>\r\n\r\n  // we need this to compute the outline properly\r\n  objectNormal = normalize( objectNormal );\r\n\r\n  #include <defaultnormal_vertex>\r\n\r\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n    vNormal = normalize( transformedNormal );\r\n  #endif\r\n\r\n  #include <begin_vertex>\r\n\r\n  #include <morphtarget_vertex>\r\n  #include <skinning_vertex>\r\n  // #include <displacementmap_vertex>\r\n  #include <project_vertex>\r\n  #include <logdepthbuf_vertex>\r\n  #include <clipping_planes_vertex>\r\n\r\n  vViewPosition = - mvPosition.xyz;\r\n\r\n  float outlineTex = 1.0;\r\n\r\n  #ifdef OUTLINE\r\n    #ifdef USE_OUTLINEWIDTHTEXTURE\r\n      outlineTex = texture2D( outlineWidthTexture, vUv ).r;\r\n    #endif\r\n\r\n    #ifdef OUTLINE_WIDTH_WORLD\r\n      float worldNormalLength = length( transformedNormal );\r\n      vec3 outlineOffset = 0.01 * outlineWidth * outlineTex * worldNormalLength * objectNormal;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( outlineOffset + transformed, 1.0 );\r\n    #endif\r\n\r\n    #ifdef OUTLINE_WIDTH_SCREEN\r\n      vec3 clipNormal = ( projectionMatrix * modelViewMatrix * vec4( objectNormal, 0.0 ) ).xyz;\r\n      vec2 projectedNormal = normalize( clipNormal.xy );\r\n      projectedNormal *= min( gl_Position.w, outlineScaledMaxDistance );\r\n      projectedNormal.x *= projectionMatrix[ 0 ].x / projectionMatrix[ 1 ].y;\r\n      gl_Position.xy += 0.01 * outlineWidth * outlineTex * projectedNormal.xy;\r\n    #endif\r\n\r\n    gl_Position.z += 1E-6 * gl_Position.w; // anti-artifact magic\r\n  #endif\r\n\r\n  #include <worldpos_vertex>\r\n  // #include <envmap_vertex>\r\n  #include <shadowmap_vertex>\r\n  #include <fog_vertex>\r\n\r\n}",this.fragmentShader=n+'// #define PHONG\r\n\r\n#ifdef BLENDMODE_CUTOUT\r\n  uniform float cutoff;\r\n#endif\r\n\r\nuniform vec3 color;\r\nuniform float colorAlpha;\r\nuniform vec3 shadeColor;\r\n#ifdef USE_SHADETEXTURE\r\n  uniform sampler2D shadeTexture;\r\n#endif\r\n\r\nuniform float receiveShadowRate;\r\n#ifdef USE_RECEIVESHADOWTEXTURE\r\n  uniform sampler2D receiveShadowTexture;\r\n#endif\r\n\r\nuniform float shadingGradeRate;\r\n#ifdef USE_SHADINGGRADETEXTURE\r\n  uniform sampler2D shadingGradeTexture;\r\n#endif\r\n\r\nuniform float shadeShift;\r\nuniform float shadeToony;\r\nuniform float lightColorAttenuation;\r\nuniform float indirectLightIntensity;\r\n\r\n#ifdef USE_RIMTEXTURE\r\n  uniform sampler2D rimTexture;\r\n#endif\r\nuniform vec3 rimColor;\r\nuniform float rimLightingMix;\r\nuniform float rimFresnelPower;\r\nuniform float rimLift;\r\n\r\n#ifdef USE_SPHEREADD\r\n  uniform sampler2D sphereAdd;\r\n#endif\r\n\r\nuniform vec3 emissionColor;\r\n\r\nuniform vec3 outlineColor;\r\nuniform float outlineLightingMix;\r\n\r\n#ifdef USE_UVANIMMASKTEXTURE\r\n  uniform sampler2D uvAnimMaskTexture;\r\n#endif\r\n\r\nuniform float uvAnimOffsetX;\r\nuniform float uvAnimOffsetY;\r\nuniform float uvAnimTheta;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <dithering_pars_fragment>\r\n#include <color_pars_fragment>\r\n\r\n// #include <uv_pars_fragment>\r\n#if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\r\n  varying vec2 vUv;\r\n#endif\r\n\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n// #include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n// #include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n// #include <envmap_common_pars_fragment>\r\n// #include <envmap_pars_fragment>\r\n// #include <cube_uv_reflection_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars_begin>\r\n\r\n// #include <lights_phong_pars_fragment>\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n  varying vec3 vNormal;\r\n#endif\r\n\r\nstruct MToonMaterial {\r\n  vec3 diffuseColor;\r\n  vec3 shadeColor;\r\n  float shadingGrade;\r\n  float receiveShadow;\r\n};\r\n\r\n#define Material_LightProbeLOD( material ) (0)\r\n\r\n#include <shadowmap_pars_fragment>\r\n// #include <bumpmap_pars_fragment>\r\n\r\n// #include <normalmap_pars_fragment>\r\n#ifdef USE_NORMALMAP\r\n\r\n  uniform sampler2D normalMap;\r\n  uniform vec2 normalScale;\r\n\r\n#endif\r\n\r\n#ifdef OBJECTSPACE_NORMALMAP\r\n\r\n  uniform mat3 normalMatrix;\r\n\r\n#endif\r\n\r\n#if ! defined ( USE_TANGENT ) && defined ( TANGENTSPACE_NORMALMAP )\r\n\r\n  // Per-Pixel Tangent Space Normal Mapping\r\n  // http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\r\n\r\n  // three-vrm specific change: it requires `uv` as an input in order to support uv scrolls\r\n\r\n  // Temporary compat against shader change @ Three.js r126\r\n  // See: #21205, #21307, #21299\r\n  #ifdef THREE_VRM_THREE_REVISION_126\r\n\r\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\r\n\r\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\r\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\r\n      vec2 st0 = dFdx( uv.st );\r\n      vec2 st1 = dFdy( uv.st );\r\n\r\n      vec3 N = normalize( surf_norm );\r\n\r\n      vec3 q1perp = cross( q1, N );\r\n      vec3 q0perp = cross( N, q0 );\r\n\r\n      vec3 T = q1perp * st0.x + q0perp * st1.x;\r\n      vec3 B = q1perp * st0.y + q0perp * st1.y;\r\n\r\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\r\n      // TODO: Is this still required? Or shall I make a PR about it?\r\n      if ( length( T ) == 0.0 || length( B ) == 0.0 ) {\r\n        return surf_norm;\r\n      }\r\n\r\n      float det = max( dot( T, T ), dot( B, B ) );\r\n      float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\r\n\r\n      return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\r\n\r\n    }\r\n\r\n  #else\r\n\r\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\r\n\r\n      // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\r\n\r\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\r\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\r\n      vec2 st0 = dFdx( uv.st );\r\n      vec2 st1 = dFdy( uv.st );\r\n\r\n      float scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\r\n\r\n      vec3 S = ( q0 * st1.t - q1 * st0.t ) * scale;\r\n      vec3 T = ( - q0 * st1.s + q1 * st0.s ) * scale;\r\n\r\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\r\n      // TODO: Is this still required? Or shall I make a PR about it?\r\n\r\n      if ( length( S ) == 0.0 || length( T ) == 0.0 ) {\r\n        return surf_norm;\r\n      }\r\n\r\n      S = normalize( S );\r\n      T = normalize( T );\r\n      vec3 N = normalize( surf_norm );\r\n\r\n      #ifdef DOUBLE_SIDED\r\n\r\n        // Workaround for Adreno GPUs gl_FrontFacing bug. See #15850 and #10331\r\n\r\n        bool frontFacing = dot( cross( S, T ), N ) > 0.0;\r\n\r\n        mapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\r\n\r\n      #else\r\n\r\n        mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n\r\n      #endif\r\n\r\n      mat3 tsn = mat3( S, T, N );\r\n      return normalize( tsn * mapN );\r\n\r\n    }\r\n\r\n  #endif\r\n\r\n#endif\r\n\r\n// #include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\n// == lighting stuff ===========================================================\r\nfloat getLightIntensity(\r\n  const in IncidentLight directLight,\r\n  const in GeometricContext geometry,\r\n  const in float shadow,\r\n  const in float shadingGrade\r\n) {\r\n  float lightIntensity = dot( geometry.normal, directLight.direction );\r\n  lightIntensity = 0.5 + 0.5 * lightIntensity;\r\n  lightIntensity = lightIntensity * shadow;\r\n  lightIntensity = lightIntensity * shadingGrade;\r\n  lightIntensity = lightIntensity * 2.0 - 1.0;\r\n  return shadeToony == 1.0\r\n    ? step( shadeShift, lightIntensity )\r\n    : smoothstep( shadeShift, shadeShift + ( 1.0 - shadeToony ), lightIntensity );\r\n}\r\n\r\nvec3 getLighting( const in vec3 lightColor ) {\r\n  vec3 lighting = lightColor;\r\n  lighting = mix(\r\n    lighting,\r\n    vec3( max( 0.001, max( lighting.x, max( lighting.y, lighting.z ) ) ) ),\r\n    lightColorAttenuation\r\n  );\r\n\r\n  #ifndef PHYSICALLY_CORRECT_LIGHTS\r\n    lighting *= PI;\r\n  #endif\r\n\r\n  return lighting;\r\n}\r\n\r\nvec3 getDiffuse(\r\n  const in MToonMaterial material,\r\n  const in float lightIntensity,\r\n  const in vec3 lighting\r\n) {\r\n  #ifdef DEBUG_LITSHADERATE\r\n    return vec3( BRDF_Diffuse_Lambert( lightIntensity * lighting ) );\r\n  #endif\r\n\r\n  return lighting * BRDF_Diffuse_Lambert( mix( material.shadeColor, material.diffuseColor, lightIntensity ) );\r\n}\r\n\r\n// == post correction ==========================================================\r\nvoid postCorrection() {\r\n  #include <tonemapping_fragment>\r\n  #include <encodings_fragment>\r\n  #include <fog_fragment>\r\n  #include <premultiplied_alpha_fragment>\r\n  #include <dithering_fragment>\r\n}\r\n\r\n// == main procedure ===========================================================\r\nvoid main() {\r\n  #include <clipping_planes_fragment>\r\n\r\n  vec2 uv = vec2(0.5, 0.5);\r\n\r\n  #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\r\n    uv = vUv;\r\n\r\n    float uvAnimMask = 1.0;\r\n    #ifdef USE_UVANIMMASKTEXTURE\r\n      uvAnimMask = texture2D( uvAnimMaskTexture, uv ).x;\r\n    #endif\r\n\r\n    uv = uv + vec2( uvAnimOffsetX, uvAnimOffsetY ) * uvAnimMask;\r\n    float uvRotCos = cos( uvAnimTheta * uvAnimMask );\r\n    float uvRotSin = sin( uvAnimTheta * uvAnimMask );\r\n    uv = mat2( uvRotCos, uvRotSin, -uvRotSin, uvRotCos ) * ( uv - 0.5 ) + 0.5;\r\n  #endif\r\n\r\n  #ifdef DEBUG_UV\r\n    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\r\n    #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\r\n      gl_FragColor = vec4( uv, 0.0, 1.0 );\r\n    #endif\r\n    return;\r\n  #endif\r\n\r\n  vec4 diffuseColor = vec4( color, colorAlpha );\r\n  ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n  vec3 totalEmissiveRadiance = emissionColor;\r\n\r\n  #include <logdepthbuf_fragment>\r\n\r\n  // #include <map_fragment>\r\n  #ifdef USE_MAP\r\n    diffuseColor *= mapTexelToLinear( texture2D( map, uv ) );\r\n  #endif\r\n\r\n  #include <color_fragment>\r\n  // #include <alphamap_fragment>\r\n\r\n  // -- MToon: alpha -----------------------------------------------------------\r\n  // #include <alphatest_fragment>\r\n  #ifdef BLENDMODE_CUTOUT\r\n    if ( diffuseColor.a <= cutoff ) { discard; }\r\n    diffuseColor.a = 1.0;\r\n  #endif\r\n\r\n  #ifdef BLENDMODE_OPAQUE\r\n    diffuseColor.a = 1.0;\r\n  #endif\r\n\r\n  #if defined( OUTLINE ) && defined( OUTLINE_COLOR_FIXED ) // omitting DebugMode\r\n    gl_FragColor = vec4( outlineColor, diffuseColor.a );\r\n    postCorrection();\r\n    return;\r\n  #endif\r\n\r\n  // #include <specularmap_fragment>\r\n  #include <normal_fragment_begin>\r\n\r\n  #ifdef OUTLINE\r\n    normal *= -1.0;\r\n  #endif\r\n\r\n  // #include <normal_fragment_maps>\r\n\r\n  #ifdef OBJECTSPACE_NORMALMAP\r\n\r\n    normal = texture2D( normalMap, uv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\r\n\r\n    #ifdef FLIP_SIDED\r\n\r\n      normal = - normal;\r\n\r\n    #endif\r\n\r\n    #ifdef DOUBLE_SIDED\r\n\r\n      // Temporary compat against shader change @ Three.js r126\r\n      // See: #21205, #21307, #21299\r\n      #ifdef THREE_VRM_THREE_REVISION_126\r\n\r\n        normal = normal * faceDirection;\r\n\r\n      #else\r\n\r\n        normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n\r\n      #endif\r\n\r\n    #endif\r\n\r\n    normal = normalize( normalMatrix * normal );\r\n\r\n  #elif defined( TANGENTSPACE_NORMALMAP )\r\n\r\n    vec3 mapN = texture2D( normalMap, uv ).xyz * 2.0 - 1.0;\r\n    mapN.xy *= normalScale;\r\n\r\n    #ifdef USE_TANGENT\r\n\r\n      normal = normalize( vTBN * mapN );\r\n\r\n    #else\r\n\r\n      // Temporary compat against shader change @ Three.js r126\r\n      // See: #21205, #21307, #21299\r\n      #ifdef THREE_VRM_THREE_REVISION_126\r\n\r\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN, faceDirection );\r\n\r\n      #else\r\n\r\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN );\r\n\r\n      #endif\r\n\r\n    #endif\r\n\r\n  #endif\r\n\r\n  // #include <emissivemap_fragment>\r\n  #ifdef USE_EMISSIVEMAP\r\n    totalEmissiveRadiance *= emissiveMapTexelToLinear( texture2D( emissiveMap, uv ) ).rgb;\r\n  #endif\r\n\r\n  #ifdef DEBUG_NORMAL\r\n    gl_FragColor = vec4( 0.5 + 0.5 * normal, 1.0 );\r\n    return;\r\n  #endif\r\n\r\n  // -- MToon: lighting --------------------------------------------------------\r\n  // accumulation\r\n  // #include <lights_phong_fragment>\r\n  MToonMaterial material;\r\n\r\n  material.diffuseColor = diffuseColor.rgb;\r\n\r\n  material.shadeColor = shadeColor;\r\n  #ifdef USE_SHADETEXTURE\r\n    material.shadeColor *= shadeTextureTexelToLinear( texture2D( shadeTexture, uv ) ).rgb;\r\n  #endif\r\n\r\n  material.shadingGrade = 1.0;\r\n  #ifdef USE_SHADINGGRADETEXTURE\r\n    material.shadingGrade = 1.0 - shadingGradeRate * ( 1.0 - texture2D( shadingGradeTexture, uv ).r );\r\n  #endif\r\n\r\n  material.receiveShadow = receiveShadowRate;\r\n  #ifdef USE_RECEIVESHADOWTEXTURE\r\n    material.receiveShadow *= texture2D( receiveShadowTexture, uv ).a;\r\n  #endif\r\n\r\n  // #include <lights_fragment_begin>\r\n  GeometricContext geometry;\r\n\r\n  geometry.position = - vViewPosition;\r\n  geometry.normal = normal;\r\n  geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\r\n\r\n  IncidentLight directLight;\r\n  vec3 lightingSum = vec3( 0.0 );\r\n\r\n  #if ( NUM_POINT_LIGHTS > 0 )\r\n    PointLight pointLight;\r\n\r\n    #if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\r\n    PointLightShadow pointLightShadow;\r\n    #endif\r\n\r\n    #pragma unroll_loop_start\r\n    for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n      pointLight = pointLights[ i ];\r\n      getPointDirectLightIrradiance( pointLight, geometry, directLight );\r\n\r\n      float atten = 1.0;\r\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\r\n      pointLightShadow = pointLightShadows[ i ];\r\n      atten = all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\r\n      #endif\r\n\r\n      float shadow = 1.0 - material.receiveShadow * ( 1.0 - ( 0.5 + 0.5 * atten ) );\r\n      float lightIntensity = getLightIntensity( directLight, geometry, shadow, material.shadingGrade );\r\n      vec3 lighting = getLighting( directLight.color );\r\n      reflectedLight.directDiffuse += getDiffuse( material, lightIntensity, lighting );\r\n      lightingSum += lighting;\r\n    }\r\n    #pragma unroll_loop_end\r\n  #endif\r\n\r\n  #if ( NUM_SPOT_LIGHTS > 0 )\r\n    SpotLight spotLight;\r\n\r\n    #if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\r\n    SpotLightShadow spotLightShadow;\r\n    #endif\r\n\r\n    #pragma unroll_loop_start\r\n    for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n      spotLight = spotLights[ i ];\r\n      getSpotDirectLightIrradiance( spotLight, geometry, directLight );\r\n\r\n      float atten = 1.0;\r\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\r\n      spotLightShadow = spotLightShadows[ i ];\r\n      atten = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\r\n      #endif\r\n\r\n      float shadow = 1.0 - material.receiveShadow * ( 1.0 - ( 0.5 + 0.5 * atten ) );\r\n      float lightIntensity = getLightIntensity( directLight, geometry, shadow, material.shadingGrade );\r\n      vec3 lighting = getLighting( directLight.color );\r\n      reflectedLight.directDiffuse += getDiffuse( material, lightIntensity, lighting );\r\n      lightingSum += lighting;\r\n    }\r\n    #pragma unroll_loop_end\r\n  #endif\r\n\r\n  #if ( NUM_DIR_LIGHTS > 0 )\r\n    DirectionalLight directionalLight;\r\n\r\n    #if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\r\n    DirectionalLightShadow directionalLightShadow;\r\n    #endif\r\n\r\n    #pragma unroll_loop_start\r\n    for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n      directionalLight = directionalLights[ i ];\r\n      getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\r\n\r\n      float atten = 1.0;\r\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\r\n      directionalLightShadow = directionalLightShadows[ i ];\r\n      atten = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\r\n      #endif\r\n\r\n      float shadow = 1.0 - material.receiveShadow * ( 1.0 - ( 0.5 + 0.5 * atten ) );\r\n      float lightIntensity = getLightIntensity( directLight, geometry, shadow, material.shadingGrade );\r\n      vec3 lighting = getLighting( directLight.color );\r\n      reflectedLight.directDiffuse += getDiffuse( material, lightIntensity, lighting );\r\n      lightingSum += lighting;\r\n    }\r\n    #pragma unroll_loop_end\r\n  #endif\r\n\r\n  // #if defined( RE_IndirectDiffuse )\r\n  vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\r\n  irradiance += getLightProbeIrradiance( lightProbe, geometry );\r\n  #if ( NUM_HEMI_LIGHTS > 0 )\r\n    #pragma unroll_loop_start\r\n    for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\r\n      irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\r\n    }\r\n    #pragma unroll_loop_end\r\n  #endif\r\n  // #endif\r\n\r\n  // #include <lights_fragment_maps>\r\n  #ifdef USE_LIGHTMAP\r\n    vec4 lightMapTexel = texture2D( lightMap, vUv2 );\r\n    vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\r\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\r\n      lightMapIrradiance *= PI;\r\n    #endif\r\n    irradiance += lightMapIrradiance;\r\n  #endif\r\n\r\n  // #include <lights_fragment_end>\r\n  // RE_IndirectDiffuse here\r\n  reflectedLight.indirectDiffuse += indirectLightIntensity * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n\r\n  // modulation\r\n  #include <aomap_fragment>\r\n\r\n  vec3 col = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\r\n\r\n  // The "comment out if you want to PBR absolutely" line\r\n  #ifndef DEBUG_LITSHADERATE\r\n    col = min(col, material.diffuseColor);\r\n  #endif\r\n\r\n  #if defined( OUTLINE ) && defined( OUTLINE_COLOR_MIXED )\r\n    gl_FragColor = vec4(\r\n      outlineColor.rgb * mix( vec3( 1.0 ), col, outlineLightingMix ),\r\n      diffuseColor.a\r\n    );\r\n    postCorrection();\r\n    return;\r\n  #endif\r\n\r\n  #ifdef DEBUG_LITSHADERATE\r\n    gl_FragColor = vec4( col, diffuseColor.a );\r\n    postCorrection();\r\n    return;\r\n  #endif\r\n\r\n  // -- MToon: parametric rim lighting -----------------------------------------\r\n  vec3 viewDir = normalize( vViewPosition );\r\n  vec3 rimMix = mix( vec3( 1.0 ), lightingSum + indirectLightIntensity * irradiance, rimLightingMix );\r\n  vec3 rim = rimColor * pow( saturate( 1.0 - dot( viewDir, normal ) + rimLift ), rimFresnelPower );\r\n  #ifdef USE_RIMTEXTURE\r\n    rim *= rimTextureTexelToLinear( texture2D( rimTexture, uv ) ).rgb;\r\n  #endif\r\n  col += rim;\r\n\r\n  // -- MToon: additive matcap -------------------------------------------------\r\n  #ifdef USE_SPHEREADD\r\n    {\r\n      vec3 x = normalize( vec3( viewDir.z, 0.0, -viewDir.x ) );\r\n      vec3 y = cross( viewDir, x ); // guaranteed to be normalized\r\n      vec2 sphereUv = 0.5 + 0.5 * vec2( dot( x, normal ), -dot( y, normal ) );\r\n      vec3 matcap = sphereAddTexelToLinear( texture2D( sphereAdd, sphereUv ) ).xyz;\r\n      col += matcap;\r\n    }\r\n  #endif\r\n\r\n  // -- MToon: Emission --------------------------------------------------------\r\n  col += totalEmissiveRadiance;\r\n\r\n  // #include <envmap_fragment>\r\n\r\n  // -- Almost done! -----------------------------------------------------------\r\n  gl_FragColor = vec4( col, diffuseColor.a );\r\n  postCorrection();\r\n}',this.needsUpdate=!0}_updateCullFace(){this.isOutline?this.outlineCullMode===e.MToonMaterialCullMode.Off?this.side=i.DoubleSide:this.outlineCullMode===e.MToonMaterialCullMode.Front?this.side=i.BackSide:this.outlineCullMode===e.MToonMaterialCullMode.Back&&(this.side=i.FrontSide):this.cullMode===e.MToonMaterialCullMode.Off?this.side=i.DoubleSide:this.cullMode===e.MToonMaterialCullMode.Front?this.side=i.BackSide:this.cullMode===e.MToonMaterialCullMode.Back&&(this.side=i.FrontSide)}}var se;e.VRMUnlitMaterialRenderType=void 0,(se=e.VRMUnlitMaterialRenderType||(e.VRMUnlitMaterialRenderType={}))[se.Opaque=0]="Opaque",se[se.Cutout=1]="Cutout",se[se.Transparent=2]="Transparent",se[se.TransparentWithZWrite=3]="TransparentWithZWrite";class le extends i.ShaderMaterial{constructor(r){super(),this.isVRMUnlitMaterial=!0,this.cutoff=.5,this.map=null,this.mainTex_ST=new i.Vector4(0,0,1,1),this._renderType=e.VRMUnlitMaterialRenderType.Opaque,this.shouldApplyUniforms=!0,void 0===r&&(r={}),r.fog=!0,r.clipping=!0,r.skinning=r.skinning||!1,r.morphTargets=r.morphTargets||!1,r.morphNormals=r.morphNormals||!1,r.uniforms=i.UniformsUtils.merge([i.UniformsLib.common,i.UniformsLib.fog,{cutoff:{value:.5},mainTex_ST:{value:new i.Vector4(0,0,1,1)}}]),this.setValues(r),this._updateShaderCode(),this._applyUniforms()}get mainTex(){return this.map}set mainTex(e){this.map=e}get renderType(){return this._renderType}set renderType(r){this._renderType=r,this.depthWrite=this._renderType!==e.VRMUnlitMaterialRenderType.Transparent,this.transparent=this._renderType===e.VRMUnlitMaterialRenderType.Transparent||this._renderType===e.VRMUnlitMaterialRenderType.TransparentWithZWrite,this._updateShaderCode()}updateVRMMaterials(e){this._applyUniforms()}copy(e){return super.copy(e),this.cutoff=e.cutoff,this.map=e.map,this.mainTex_ST.copy(e.mainTex_ST),this.renderType=e.renderType,this}_applyUniforms(){this.shouldApplyUniforms&&(this.shouldApplyUniforms=!1,this.uniforms.cutoff.value=this.cutoff,this.uniforms.map.value=this.map,this.uniforms.mainTex_ST.value.copy(this.mainTex_ST))}_updateShaderCode(){this.defines={RENDERTYPE_OPAQUE:this._renderType===e.VRMUnlitMaterialRenderType.Opaque,RENDERTYPE_CUTOUT:this._renderType===e.VRMUnlitMaterialRenderType.Cutout,RENDERTYPE_TRANSPARENT:this._renderType===e.VRMUnlitMaterialRenderType.Transparent||this._renderType===e.VRMUnlitMaterialRenderType.TransparentWithZWrite},this.vertexShader="#include <common>\r\n\r\n// #include <uv_pars_vertex>\r\n#ifdef USE_MAP\r\n  varying vec2 vUv;\r\n  uniform vec4 mainTex_ST;\r\n#endif\r\n\r\n#include <uv2_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <fog_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n  // #include <uv_vertex>\r\n  #ifdef USE_MAP\r\n    vUv = vec2( mainTex_ST.p * uv.x + mainTex_ST.s, mainTex_ST.q * uv.y + mainTex_ST.t );\r\n  #endif\r\n\r\n  #include <uv2_vertex>\r\n  #include <color_vertex>\r\n  #include <skinbase_vertex>\r\n\r\n  #ifdef USE_ENVMAP\r\n\r\n  #include <beginnormal_vertex>\r\n  #include <morphnormal_vertex>\r\n  #include <skinnormal_vertex>\r\n  #include <defaultnormal_vertex>\r\n\r\n  #endif\r\n\r\n  #include <begin_vertex>\r\n  #include <morphtarget_vertex>\r\n  #include <skinning_vertex>\r\n  #include <project_vertex>\r\n  #include <logdepthbuf_vertex>\r\n\r\n  #include <worldpos_vertex>\r\n  #include <clipping_planes_vertex>\r\n  #include <envmap_vertex>\r\n  #include <fog_vertex>\r\n\r\n}",this.fragmentShader="#ifdef RENDERTYPE_CUTOUT\r\n  uniform float cutoff;\r\n#endif\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n// #include <alphamap_pars_fragment>\r\n// #include <aomap_pars_fragment>\r\n// #include <lightmap_pars_fragment>\r\n// #include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n// #include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\n// == main procedure ===========================================================\r\nvoid main() {\r\n  #include <clipping_planes_fragment>\r\n\r\n  vec4 diffuseColor = vec4( 1.0 );\r\n\r\n  #include <logdepthbuf_fragment>\r\n\r\n  // #include <map_fragment>\r\n  #ifdef USE_MAP\r\n    diffuseColor *= mapTexelToLinear( texture2D( map, vUv ) );\r\n  #endif\r\n\r\n  #include <color_fragment>\r\n  // #include <alphamap_fragment>\r\n\r\n  // MToon: alpha\r\n  // #include <alphatest_fragment>\r\n  #ifdef RENDERTYPE_CUTOUT\r\n    if ( diffuseColor.a <= cutoff ) { discard; }\r\n    diffuseColor.a = 1.0;\r\n  #endif\r\n\r\n  #ifdef RENDERTYPE_OPAQUE\r\n    diffuseColor.a = 1.0;\r\n  #endif\r\n\r\n  // #include <specularmap_fragment>\r\n\r\n  ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\r\n  // accumulation (baked indirect lighting only)\r\n  #ifdef USE_LIGHTMAP\r\n    reflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\r\n  #else\r\n    reflectedLight.indirectDiffuse += vec3( 1.0 );\r\n  #endif\r\n\r\n  // modulation\r\n  // #include <aomap_fragment>\r\n\r\n  reflectedLight.indirectDiffuse *= diffuseColor.rgb;\r\n  vec3 outgoingLight = reflectedLight.indirectDiffuse;\r\n\r\n  // #include <envmap_fragment>\r\n\r\n  gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n  #include <premultiplied_alpha_fragment>\r\n  #include <tonemapping_fragment>\r\n  #include <encodings_fragment>\r\n  #include <fog_fragment>\r\n}",this.needsUpdate=!0}}class de{constructor(e={}){this._encoding=e.encoding||i.LinearEncoding,this._encoding!==i.LinearEncoding&&this._encoding!==i.sRGBEncoding&&console.warn("The specified color encoding might not work properly with VRMMaterialImporter. You might want to use THREE.sRGBEncoding instead."),this._requestEnvMap=e.requestEnvMap}convertGLTFMaterials(e){var r;return o(this,void 0,void 0,(function*(){const t=null===(r=e.parser.json.extensions)||void 0===r?void 0:r.VRM;if(!t)return null;const n=t.materialProperties;if(!n)return null;const i=yield y(e),a={},s=[];return yield Promise.all(Array.from(i.entries()).map((([r,t])=>o(this,void 0,void 0,(function*(){const i=e.parser.json.nodes[r],l=e.parser.json.meshes[i.mesh];yield Promise.all(t.map(((r,t)=>o(this,void 0,void 0,(function*(){const i=l.primitives[t];if(!i)return;const o=r.geometry,d=o.index?o.index.count:o.attributes.position.count/3;Array.isArray(r.material)||(r.material=[r.material],o.addGroup(0,d,0));const h=i.material;let u,c=n[h];c||(console.warn(`VRMMaterialImporter: There are no material definition for material #${h} on VRM extension.`),c={shader:"VRM_USE_GLTFSHADER"}),a[h]?u=a[h]:(u=yield this.createVRMMaterials(r.material[0],c,e),a[h]=u,s.push(u.surface),u.outline&&s.push(u.outline)),r.material[0]=u.surface,this._requestEnvMap&&u.surface.isMeshStandardMaterial&&this._requestEnvMap().then((e=>{u.surface.envMap=e,u.surface.needsUpdate=!0})),r.renderOrder=c.renderQueue||2e3,u.outline&&(r.material[1]=u.outline,o.addGroup(0,d,1))})))))}))))),s}))}createVRMMaterials(r,t,n){return o(this,void 0,void 0,(function*(){let i,o;if("VRM/MToon"===t.shader){const a=yield this._extractMaterialProperties(r,t,n);["srcBlend","dstBlend","isFirstSetup"].forEach((e=>{void 0!==a[e]&&delete a[e]})),["mainTex","shadeTexture","emissionMap","sphereAdd","rimTexture"].forEach((e=>{void 0!==a[e]&&(a[e].encoding=this._encoding)})),a.encoding=this._encoding,i=new ae(a),a.outlineWidthMode!==e.MToonMaterialOutlineWidthMode.None&&(a.isOutline=!0,o=new ae(a))}else if("VRM/UnlitTexture"===t.shader){const o=yield this._extractMaterialProperties(r,t,n);o.renderType=e.VRMUnlitMaterialRenderType.Opaque,i=new le(o)}else if("VRM/UnlitCutout"===t.shader){const o=yield this._extractMaterialProperties(r,t,n);o.renderType=e.VRMUnlitMaterialRenderType.Cutout,i=new le(o)}else if("VRM/UnlitTransparent"===t.shader){const o=yield this._extractMaterialProperties(r,t,n);o.renderType=e.VRMUnlitMaterialRenderType.Transparent,i=new le(o)}else if("VRM/UnlitTransparentZWrite"===t.shader){const o=yield this._extractMaterialProperties(r,t,n);o.renderType=e.VRMUnlitMaterialRenderType.TransparentWithZWrite,i=new le(o)}else"VRM_USE_GLTFSHADER"!==t.shader&&console.warn(`Unknown shader detected: "${t.shader}"`),i=this._convertGLTFMaterial(r.clone());return i.name=r.name,i.userData=JSON.parse(JSON.stringify(r.userData)),i.userData.vrmMaterialProperties=t,o&&(o.name=r.name+" (Outline)",o.userData=JSON.parse(JSON.stringify(r.userData)),o.userData.vrmMaterialProperties=t),{surface:i,outline:o}}))}_renameMaterialProperty(e){return"_"!==e[0]?(console.warn(`VRMMaterials: Given property name "${e}" might be invalid`),e):(e=e.substring(1),/[A-Z]/.test(e[0])?e[0].toLowerCase()+e.substring(1):(console.warn(`VRMMaterials: Given property name "${e}" might be invalid`),e))}_convertGLTFMaterial(e){if(e.isMeshStandardMaterial){const r=e;r.map&&(r.map.encoding=this._encoding),r.emissiveMap&&(r.emissiveMap.encoding=this._encoding),this._encoding===i.LinearEncoding&&(r.color.convertLinearToSRGB(),r.emissive.convertLinearToSRGB())}if(e.isMeshBasicMaterial){const r=e;r.map&&(r.map.encoding=this._encoding),this._encoding===i.LinearEncoding&&r.color.convertLinearToSRGB()}return e}_extractMaterialProperties(e,r,t){const n=[],o={};if(r.textureProperties)for(const e of Object.keys(r.textureProperties)){const i=this._renameMaterialProperty(e),a=r.textureProperties[e];n.push(t.parser.getDependency("texture",a).then((e=>{o[i]=e})))}if(r.floatProperties)for(const e of Object.keys(r.floatProperties)){const t=this._renameMaterialProperty(e);o[t]=r.floatProperties[e]}if(r.vectorProperties)for(const e of Object.keys(r.vectorProperties)){let t=this._renameMaterialProperty(e);["_MainTex","_ShadeTexture","_BumpMap","_ReceiveShadowTexture","_ShadingGradeTexture","_RimTexture","_SphereAdd","_EmissionMap","_OutlineWidthTexture","_UvAnimMaskTexture"].some((r=>e===r))&&(t+="_ST"),o[t]=new i.Vector4(...r.vectorProperties[e])}return o.skinning=e.skinning||!1,o.morphTargets=e.morphTargets||!1,o.morphNormals=e.morphNormals||!1,Promise.all(n).then((()=>o))}}class he{constructor(e){var r;this.ignoreTexture=null!==(r=null==e?void 0:e.ignoreTexture)&&void 0!==r&&r}import(e){var r;return o(this,void 0,void 0,(function*(){const t=null===(r=e.parser.json.extensions)||void 0===r?void 0:r.VRM;if(!t)return null;const n=t.meta;if(!n)return null;let i;return this.ignoreTexture||null==n.texture||-1===n.texture||(i=yield e.parser.getDependency("texture",n.texture)),{allowedUserName:n.allowedUserName,author:n.author,commercialUssageName:n.commercialUssageName,contactInformation:n.contactInformation,licenseName:n.licenseName,otherLicenseUrl:n.otherLicenseUrl,otherPermissionUrl:n.otherPermissionUrl,reference:n.reference,sexualUssageName:n.sexualUssageName,texture:null!=i?i:void 0,title:n.title,version:n.version,violentUssageName:n.violentUssageName}}))}}const ue=new i.Matrix4;function ce(e){return e.invert?e.invert():e.getInverse(ue.copy(e)),e}class pe{constructor(e){this._inverseCache=new i.Matrix4,this._shouldUpdateInverse=!0,this.matrix=e;const r={set:(e,r,t)=>(this._shouldUpdateInverse=!0,e[r]=t,!0)};this._originalElements=e.elements,e.elements=new Proxy(e.elements,r)}get inverse(){return this._shouldUpdateInverse&&(ce(this._inverseCache.copy(this.matrix)),this._shouldUpdateInverse=!1),this._inverseCache}revert(){this.matrix.elements=this._originalElements}}const me=Object.freeze(new i.Matrix4),fe=Object.freeze(new i.Quaternion),ge=new i.Vector3,_e=new i.Vector3,ve=new i.Vector3,Me=new i.Quaternion,Te=new i.Matrix4,ye=new i.Matrix4;class xe{constructor(e,r={}){var t,n,o,a,s,l;if(this._currentTail=new i.Vector3,this._prevTail=new i.Vector3,this._nextTail=new i.Vector3,this._boneAxis=new i.Vector3,this._centerSpacePosition=new i.Vector3,this._center=null,this._parentWorldRotation=new i.Quaternion,this._initialLocalMatrix=new i.Matrix4,this._initialLocalRotation=new i.Quaternion,this._initialLocalChildPosition=new i.Vector3,this.bone=e,this.bone.matrixAutoUpdate=!1,this.radius=null!==(t=r.radius)&&void 0!==t?t:.02,this.stiffnessForce=null!==(n=r.stiffnessForce)&&void 0!==n?n:1,this.gravityDir=r.gravityDir?(new i.Vector3).copy(r.gravityDir):(new i.Vector3).set(0,-1,0),this.gravityPower=null!==(o=r.gravityPower)&&void 0!==o?o:0,this.dragForce=null!==(a=r.dragForce)&&void 0!==a?a:.4,this.colliders=null!==(s=r.colliders)&&void 0!==s?s:[],this._centerSpacePosition.setFromMatrixPosition(this.bone.matrixWorld),this._initialLocalMatrix.copy(this.bone.matrix),this._initialLocalRotation.copy(this.bone.quaternion),0===this.bone.children.length)this._initialLocalChildPosition.copy(this.bone.position).normalize().multiplyScalar(.07);else{const e=this.bone.children[0];this._initialLocalChildPosition.copy(e.position)}this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)),this._prevTail.copy(this._currentTail),this._nextTail.copy(this._currentTail),this._boneAxis.copy(this._initialLocalChildPosition).normalize(),this._centerSpaceBoneLength=ge.copy(this._initialLocalChildPosition).applyMatrix4(this.bone.matrixWorld).sub(this._centerSpacePosition).length(),this.center=null!==(l=r.center)&&void 0!==l?l:null}get center(){return this._center}set center(e){var r;this._getMatrixCenterToWorld(Te),this._currentTail.applyMatrix4(Te),this._prevTail.applyMatrix4(Te),this._nextTail.applyMatrix4(Te),(null===(r=this._center)||void 0===r?void 0:r.userData.inverseCacheProxy)&&(this._center.userData.inverseCacheProxy.revert(),delete this._center.userData.inverseCacheProxy),this._center=e,this._center&&(this._center.userData.inverseCacheProxy||(this._center.userData.inverseCacheProxy=new pe(this._center.matrixWorld))),this._getMatrixWorldToCenter(Te),this._currentTail.applyMatrix4(Te),this._prevTail.applyMatrix4(Te),this._nextTail.applyMatrix4(Te),Te.multiply(this.bone.matrixWorld),this._centerSpacePosition.setFromMatrixPosition(Te),this._centerSpaceBoneLength=ge.copy(this._initialLocalChildPosition).applyMatrix4(Te).sub(this._centerSpacePosition).length()}reset(){this.bone.quaternion.copy(this._initialLocalRotation),this.bone.updateMatrix(),this.bone.matrixWorld.multiplyMatrices(this._getParentMatrixWorld(),this.bone.matrix),this._centerSpacePosition.setFromMatrixPosition(this.bone.matrixWorld),this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)),this._prevTail.copy(this._currentTail),this._nextTail.copy(this._currentTail)}update(e){if(e<=0)return;this.bone.matrixWorld.multiplyMatrices(this._getParentMatrixWorld(),this.bone.matrix),this.bone.parent?L(this.bone.parent,this._parentWorldRotation):this._parentWorldRotation.copy(fe),this._getMatrixWorldToCenter(Te),Te.multiply(this.bone.matrixWorld),this._centerSpacePosition.setFromMatrixPosition(Te),this._getMatrixWorldToCenter(ye),ye.multiply(this._getParentMatrixWorld());const r=this.stiffnessForce*e,t=_e.copy(this.gravityDir).multiplyScalar(this.gravityPower*e);this._nextTail.copy(this._currentTail).add(ge.copy(this._currentTail).sub(this._prevTail).multiplyScalar(1-this.dragForce)).add(ge.copy(this._boneAxis).applyMatrix4(this._initialLocalMatrix).applyMatrix4(ye).sub(this._centerSpacePosition).normalize().multiplyScalar(r)).add(t),this._nextTail.sub(this._centerSpacePosition).normalize().multiplyScalar(this._centerSpaceBoneLength).add(this._centerSpacePosition),this._collision(this._nextTail),this._prevTail.copy(this._currentTail),this._currentTail.copy(this._nextTail);const n=ce(Te.copy(ye.multiply(this._initialLocalMatrix))),i=Me.setFromUnitVectors(this._boneAxis,ge.copy(this._nextTail).applyMatrix4(n).normalize());this.bone.quaternion.copy(this._initialLocalRotation).multiply(i),this.bone.updateMatrix(),this.bone.matrixWorld.multiplyMatrices(this._getParentMatrixWorld(),this.bone.matrix)}_collision(e){this.colliders.forEach((r=>{this._getMatrixWorldToCenter(Te),Te.multiply(r.matrixWorld);const t=ge.setFromMatrixPosition(Te),n=r.geometry.boundingSphere.radius,i=this.radius+n;if(e.distanceToSquared(t)<=i*i){const r=_e.subVectors(e,t).normalize(),n=ve.addVectors(t,r.multiplyScalar(i));e.copy(n.sub(this._centerSpacePosition).normalize().multiplyScalar(this._centerSpaceBoneLength).add(this._centerSpacePosition))}}))}_getMatrixCenterToWorld(e){return this._center?e.copy(this._center.matrixWorld):e.identity(),e}_getMatrixWorldToCenter(e){return this._center?e.copy(this._center.userData.inverseCacheProxy.inverse):e.identity(),e}_getParentMatrixWorld(){return this.bone.parent?this.bone.parent.matrixWorld:me}}class Se{constructor(e,r){this.colliderGroups=[],this.springBoneGroupList=[],this.colliderGroups=e,this.springBoneGroupList=r}setCenter(e){this.springBoneGroupList.forEach((r=>{r.forEach((r=>{r.center=e}))}))}lateUpdate(e){this.springBoneGroupList.forEach((r=>{r.forEach((r=>{r.update(e)}))}))}reset(){this.springBoneGroupList.forEach((e=>{e.forEach((e=>{e.reset()}))}))}}const Re=new i.Vector3,Le=new i.MeshBasicMaterial({visible:!1});class Ee{import(e){var r;return o(this,void 0,void 0,(function*(){const t=null===(r=e.parser.json.extensions)||void 0===r?void 0:r.VRM;if(!t)return null;const n=t.secondaryAnimation;if(!n)return null;const i=yield this._importColliderMeshGroups(e,n),o=yield this._importSpringBoneGroupList(e,n,i);return new Se(i,o)}))}_createSpringBone(e,r={}){return new xe(e,r)}_importSpringBoneGroupList(e,r,t){return o(this,void 0,void 0,(function*(){const n=r.boneGroups||[],a=[];return yield Promise.all(n.map((r=>o(this,void 0,void 0,(function*(){if(void 0===r.stiffiness||void 0===r.gravityDir||void 0===r.gravityDir.x||void 0===r.gravityDir.y||void 0===r.gravityDir.z||void 0===r.gravityPower||void 0===r.dragForce||void 0===r.hitRadius||void 0===r.colliderGroups||void 0===r.bones||void 0===r.center)return;const n=r.stiffiness,s=new i.Vector3(r.gravityDir.x,r.gravityDir.y,-r.gravityDir.z),l=r.gravityPower,d=r.dragForce,h=r.hitRadius,u=[];r.colliderGroups.forEach((e=>{u.push(...t[e].colliders)}));const c=[];yield Promise.all(r.bones.map((t=>o(this,void 0,void 0,(function*(){const i=yield e.parser.getDependency("node",t),o=-1!==r.center?yield e.parser.getDependency("node",r.center):null;i&&i.traverse((e=>{const r=this._createSpringBone(e,{radius:h,stiffnessForce:n,gravityDir:s,gravityPower:l,dragForce:d,colliders:u,center:o});c.push(r)}))}))))),a.push(c)}))))),a}))}_importColliderMeshGroups(e,r){return o(this,void 0,void 0,(function*(){const t=r.colliderGroups;if(void 0===t)return[];const n=[];return t.forEach((r=>o(this,void 0,void 0,(function*(){if(void 0===r.node||void 0===r.colliders)return;const t=yield e.parser.getDependency("node",r.node),i=[];r.colliders.forEach((e=>{if(void 0===e.offset||void 0===e.offset.x||void 0===e.offset.y||void 0===e.offset.z||void 0===e.radius)return;const r=Re.set(e.offset.x,e.offset.y,-e.offset.z),n=this._createColliderMesh(e.radius,r);t.add(n),i.push(n)}));const o={node:r.node,colliders:i};n.push(o)})))),n}))}_createColliderMesh(e,r){const t=new i.Mesh(new i.SphereBufferGeometry(e,8,4),Le);return t.position.copy(r),t.name="vrmColliderSphere",t.geometry.computeBoundingSphere(),t}}class we{constructor(e={}){this._metaImporter=e.metaImporter||new he,this._blendShapeImporter=e.blendShapeImporter||new w,this._lookAtImporter=e.lookAtImporter||new J,this._humanoidImporter=e.humanoidImporter||new G,this._firstPersonImporter=e.firstPersonImporter||new D,this._materialImporter=e.materialImporter||new de,this._springBoneImporter=e.springBoneImporter||new Ee}import(e){return o(this,void 0,void 0,(function*(){if(void 0===e.parser.json.extensions||void 0===e.parser.json.extensions.VRM)throw new Error("Could not find VRM extension on the GLTF");const r=e.scene;r.updateMatrixWorld(!1),r.traverse((e=>{e.isMesh&&(e.frustumCulled=!1)}));const t=(yield this._metaImporter.import(e))||void 0,n=(yield this._materialImporter.convertGLTFMaterials(e))||void 0,i=(yield this._humanoidImporter.import(e))||void 0,o=i&&(yield this._firstPersonImporter.import(e,i))||void 0,a=(yield this._blendShapeImporter.import(e))||void 0,s=o&&a&&i&&(yield this._lookAtImporter.import(e,o,a,i))||void 0,l=(yield this._springBoneImporter.import(e))||void 0;return new Pe({scene:e.scene,meta:t,materials:n,humanoid:i,firstPerson:o,blendShapeProxy:a,lookAt:s,springBoneManager:l})}))}}class Pe{constructor(e){this.scene=e.scene,this.humanoid=e.humanoid,this.blendShapeProxy=e.blendShapeProxy,this.firstPerson=e.firstPerson,this.lookAt=e.lookAt,this.materials=e.materials,this.springBoneManager=e.springBoneManager,this.meta=e.meta}static from(e,r={}){return o(this,void 0,void 0,(function*(){const t=new we(r);return yield t.import(e)}))}update(e){this.lookAt&&this.lookAt.update(e),this.blendShapeProxy&&this.blendShapeProxy.update(),this.springBoneManager&&this.springBoneManager.lateUpdate(e),this.materials&&this.materials.forEach((r=>{r.updateVRMMaterials&&r.updateVRMMaterials(e)}))}dispose(){var e,r;const t=this.scene;t&&t.traverse(s),null===(r=null===(e=this.meta)||void 0===e?void 0:e.texture)||void 0===r||r.dispose()}}const Ae=new i.Vector2,Ce=new i.OrthographicCamera(-1,1,-1,1,-1,1),Oe=new i.MeshBasicMaterial({color:16777215,side:i.DoubleSide}),be=new i.Mesh(new i.PlaneBufferGeometry(2,2),Oe),De=new i.Scene;De.add(be);class Ve{constructor(){}}Ve.extractThumbnailBlob=function(e,r,t=512){var n;const i=null===(n=r.meta)||void 0===n?void 0:n.texture;if(!i)throw new Error("extractThumbnailBlob: This VRM does not have a thumbnail");const o=e.getContext().canvas;e.getSize(Ae);const a=Ae.x,s=Ae.y;return e.setSize(t,t,!1),Oe.map=i,e.render(De,Ce),Oe.map=null,o instanceof OffscreenCanvas?o.convertToBlob().finally((()=>{e.setSize(a,s,!1)})):new Promise(((r,t)=>{o.toBlob((n=>{e.setSize(a,s,!1),null==n?t("extractThumbnailBlob: Failed to create a blob"):r(n)}))}))},Ve.removeUnnecessaryJoints=function(e){const r=new Map;e.traverse((e=>{if("SkinnedMesh"!==e.type)return;const t=e,n=t.geometry.getAttribute("skinIndex");let o=r.get(n);if(!o){const e=[],a=[],s={},l=n.array;for(let r=0;r<l.length;r++){const n=l[r];void 0===s[n]&&(s[n]=e.length,e.push(t.skeleton.bones[n]),a.push(t.skeleton.boneInverses[n])),l[r]=s[n]}n.copyArray(l),n.needsUpdate=!0,o=new i.Skeleton(e,a),r.set(n,o)}t.bind(o,new i.Matrix4)}))};const Ne=new i.Vector3;class Ue extends q{setupHelper(e,r){r.disableFaceDirectionHelper||(this._faceDirectionHelper=new i.ArrowHelper(new i.Vector3(0,0,-1),new i.Vector3(0,0,0),.5,16711935),e.add(this._faceDirectionHelper))}update(e){super.update(e),this._faceDirectionHelper&&(this.firstPerson.getFirstPersonWorldPosition(this._faceDirectionHelper.position),this._faceDirectionHelper.setDirection(this.getLookAtWorldDirection(Ne)))}}class Ie extends J{import(e,r,t,n){var i;const o=null===(i=e.parser.json.extensions)||void 0===i?void 0:i.VRM;if(!o)return null;const a=o.firstPerson;if(!a)return null;const s=this._importApplyer(a,t,n);return new Ue(r,s||void 0)}}const Be=new i.MeshBasicMaterial({color:16711935,wireframe:!0,transparent:!0,depthTest:!1});class Ge extends Se{setupHelper(e,r){r.disableSpringBoneHelper||(this.springBoneGroupList.forEach((r=>{r.forEach((r=>{if(r.getGizmo){const t=r.getGizmo();e.add(t)}}))})),this.colliderGroups.forEach((e=>{e.colliders.forEach((e=>{e.material=Be,e.renderOrder=ze}))})))}}const Fe=new i.Vector3;class ke extends xe{constructor(e,r){super(e,r)}getGizmo(){if(this._gizmo)return this._gizmo;const e=Fe.copy(this._nextTail).sub(this._centerSpacePosition),r=e.length();return this._gizmo=new i.ArrowHelper(e.normalize(),this._centerSpacePosition,r,16776960,this.radius,this.radius),this._gizmo.line.renderOrder=ze,this._gizmo.cone.renderOrder=ze,this._gizmo.line.material.depthTest=!1,this._gizmo.line.material.transparent=!0,this._gizmo.cone.material.depthTest=!1,this._gizmo.cone.material.transparent=!0,this._gizmo}update(e){super.update(e),this._updateGizmo()}_updateGizmo(){if(!this._gizmo)return;const e=Fe.copy(this._currentTail).sub(this._centerSpacePosition),r=e.length();this._gizmo.setDirection(e.normalize()),this._gizmo.setLength(r,this.radius,this.radius),this._gizmo.position.copy(this._centerSpacePosition)}}class We extends Ee{import(e){var r;return o(this,void 0,void 0,(function*(){const t=null===(r=e.parser.json.extensions)||void 0===r?void 0:r.VRM;if(!t)return null;const n=t.secondaryAnimation;if(!n)return null;const i=yield this._importColliderMeshGroups(e,n),o=yield this._importSpringBoneGroupList(e,n,i);return new Ge(i,o)}))}_createSpringBone(e,r){return new ke(e,r)}}class He extends we{constructor(e={}){e.lookAtImporter=e.lookAtImporter||new Ie,e.springBoneImporter=e.springBoneImporter||new We,super(e)}import(e,r={}){return o(this,void 0,void 0,(function*(){if(void 0===e.parser.json.extensions||void 0===e.parser.json.extensions.VRM)throw new Error("Could not find VRM extension on the GLTF");const t=e.scene;t.updateMatrixWorld(!1),t.traverse((e=>{e.isMesh&&(e.frustumCulled=!1)}));const n=(yield this._metaImporter.import(e))||void 0,i=(yield this._materialImporter.convertGLTFMaterials(e))||void 0,o=(yield this._humanoidImporter.import(e))||void 0,a=o&&(yield this._firstPersonImporter.import(e,o))||void 0,s=(yield this._blendShapeImporter.import(e))||void 0,l=a&&s&&o&&(yield this._lookAtImporter.import(e,a,s,o))||void 0;l.setupHelper&&l.setupHelper(t,r);const d=(yield this._springBoneImporter.import(e))||void 0;return d.setupHelper&&d.setupHelper(t,r),new je({scene:e.scene,meta:n,materials:i,humanoid:o,firstPerson:a,blendShapeProxy:s,lookAt:l,springBoneManager:d},r)}))}}const ze=1e4;class je extends Pe{static from(e,r={},t={}){return o(this,void 0,void 0,(function*(){const n=new He(r);return yield n.import(e,t)}))}constructor(e,r={}){super(e),r.disableBoxHelper||this.scene.add(new i.BoxHelper(this.scene)),r.disableSkeletonHelper||this.scene.add(new i.SkeletonHelper(this.scene))}update(e){super.update(e)}}e.MToonMaterial=ae,e.VRM=Pe,e.VRMBlendShapeGroup=c,e.VRMBlendShapeImporter=w,e.VRMBlendShapeProxy=E,e.VRMCurveMapper=F,e.VRMDebug=je,e.VRMFirstPerson=b,e.VRMFirstPersonImporter=D,e.VRMHumanBone=V,e.VRMHumanoid=B,e.VRMHumanoidImporter=G,e.VRMImporter=we,e.VRMLookAtApplyer=k,e.VRMLookAtBlendShapeApplyer=W,e.VRMLookAtBoneApplyer=Z,e.VRMLookAtHead=q,e.VRMLookAtImporter=J,e.VRMMaterialImporter=de,e.VRMMetaImporter=he,e.VRMRendererFirstPersonFlags=O,e.VRMSpringBone=xe,e.VRMSpringBoneDebug=ke,e.VRMSpringBoneImporter=Ee,e.VRMSpringBoneImporterDebug=We,e.VRMSpringBoneManager=Se,e.VRMUnlitMaterial=le,e.VRMUtils=Ve,e.VRM_GIZMO_RENDER_ORDER=ze,Object.defineProperty(e,"__esModule",{value:!0}),Object.assign(r,e)}));
